def solution(brown, yellow):
    # 1. 수학적 모델링
    # 2. 가능한 가로, 세로 길이 조합 탐색
    # 3. 조건에 맞는 가로, 세로 길이 반환

    # 카펫의 가로 길이를 w, 세로 길이를 h
    # 갈색 격자의 수 = 테두리를 따라 가로와 세로의 길이를 따라 1줄씩 존재
        # 2w + 2h - 4(가로와 세로가 겹치는 부분 4군데)
    # 노란색 격자의 수
        # (w - 2(가로에서 양쪽 끝부분 제외)) * (h - 2(세로에서 양 끝부분 제외))

    # 해당 식을 통해 가로 세로 길이를 알아내야함
    # w와 h를 찾기 위해, h를 고정하고 w를 구하는 방식으로 탐색
    # w는 항상 h보다 크거나 같아야함 w >= h

    # 항상 중앙에 노란색 격자를 형성하기 위해선 w와 h는 최소 3임
    for h in range(3, yellow + 3):
        # yellow가 (h - 2)로 나누어 떨어지는지 확인
        if yellow % (h - 2) == 0:
            # w를 계산
            w = (yellow // (h - 2)) + 2
            # 방정식 1을 만족하는지 확인
            if 2 * w + 2 * h - 4 == brown:
                # w는 항상 h보다 크거나 같아야 하므로 [w, h]를 반환
                return [w, h]

print(solution(10,2)) # [4,3]
print(solution(8,1)) # [3,3]
print(solution(24,24)) # [8,6]